<?php
function feneko_migrate_users($SIMULATE = true) {
	// Get all users
	$users = array();
	$query = new EntityFieldQuery();
	$result = $query->entityCondition('entity_type', 'user')
									->propertyCondition('uid', 0, '<>') // Anonymous user
									->propertyCondition('uid', 1, '<>') // admin user
									->propertyCondition('name', 'api', '<>') // api user
									->execute();
	if (isset($result['user'])) {
	  $nids = array_keys($result['user']);
	  $users = entity_load('user', $nids);
	}

	$mappings = feneko_migrate_csv_users();

	$l = LANGUAGE_NONE;

	$msgs = array();

	// Loop over all users in de DB
	foreach ($users as $user) {
		$noClients = false;
		$klantennummers = $user->field_klantennummer;
		if(isset($klantennummers[$l]) && is_array($klantennummers[$l])) {
			$clients = array();

			// Loop over all klantennummers
			foreach ($klantennummers[$l] as $values) {
				$klantennummer = $values['value'];
				$query = new EntityFieldQuery();
				$result = $query->entityCondition('entity_type', 'node')
							    ->entityCondition('bundle', 'client')
							    ->fieldCondition('field_client_number', 'value', $klantennummer)
							    ->execute();

				// If there are results, we add the first (and only expected) result as a client
				if(count($result)) {
					$clientNid = key($result['node']);
					$clients[] = array('target_id' => $clientNid);
				} else {
					$msg = t('Client number :num not found for user :name.', array(
						':num' => $klantennummer,
						':name' => $user->name,
					));
					$msgs['not_found'][] = $msg;
				}
			}

			// If clients have been identified to link to the user, we first link them,
			// then we set the phone number
			// Otherwise we remove users that are not connected to any client
			if(count($clients) > 0) {
				$user->field_clients[$l] = $clients;
				$wrapper = entity_metadata_wrapper('user', $user);
				feneko_migrate_set_phone($wrapper, $mappings);
				feneko_migrate_set_staffelkorting($clients, $wrapper, $SIMULATE);

				if($SIMULATE) {
					$msg = t('SIMULATION: saving user :uid', array(':uid' => $user->uid));
					drupal_set_message($msg, 'status');
				} else {
					$wrapper->save();
				}
			} else {
				$noClients = true;
			}
		} else {
			$noClients = true;
		}

		// If the user doesn't have any clients, we let it know and remove the user
		if($noClients) {
			$msg = t('User :name (:uid) is not assigned to a client. REMOVED USER.', array(
				':name' => $user->name,
				':uid' => $user->uid,
			));
			$msgs['not_assigned'][] = $msg;

			if($SIMULATE) {
				$msg = t('SIMULATION: removing user :uid', array(':uid' => $user->uid));
				drupal_set_message($msg, 'status');
			} else {
				user_delete($user->uid);
			}
		}
	}

	// Finally we set all the messages
	foreach ($msgs as $type => $messages) {
		foreach ($messages as $msg) {
			drupal_set_message($msg, 'warning');
		}
	}
}

function feneko_migrate_set_phone(&$wrapper, $mappings) {
	$email = $wrapper->mail->value();
	$currentPhone = $wrapper->field_telefoon->value();
	$newPhone = isset($mappings['emails'][$email]) ? $mappings['emails'][$email] : $currentPhone;
	$newPhone = substr($newPhone, 0, 32);
	$wrapper->field_phone->set($newPhone);
}

function feneko_migrate_set_staffelkorting($clients, $wrapper, $SIMULATE = true) {
	$sk = $wrapper->field_staffelkorting->value();
	$sk = empty($sk) ? 'discount_global_discount_0_200' : $sk;

	foreach ($clients as $value) {
		_fm_set_staffelkorting($sk, $value['target_id'], $SIMULATE);
	}
}

function _fm_set_staffelkorting($sk, $clientNid, $SIMULATE = true) {
	$client = entity_metadata_wrapper('node', $clientNid);
	$clientSk = $client->field_staffelkorting->value();

	if(empty($clientSk)) {
		if($SIMULATE) {
			$msg = t('SIMULATION: client :client (:num) doesn\'t have a staffelkorting. Setting to :sk', array(
				':client' => $client->title->value(),
				':num' => $client->field_client_number->value(),
				':sk' => $sk,
			));
			drupal_set_message($msg, 'status');
		} else {
			$client->field_staffelkorting->set($sk);
			$client->save();
		}
	} else {
		$chunks = explode('_', $sk);
		$min = intval($chunks[3]);

		$chunks = explode('_', $clientSk);
		$clientMin = intval($chunks[3]);

		// If the provided minimum is higher than teh minimum we have on the client,
		// we set the higher one.
		if($min > $clientMin) {
			if($SIMULATE) {
				$msg = t('SIMULATION: client :client (:num) has a staffelkorting: :clientSk. Setting to higher :sk', array(
					':client' => $client->title->value(),
					':num' => $client->field_client_number->value(),
					':clientSk' => $clientSk,
					':sk' => $sk,
				));
				drupal_set_message($msg, 'status');
			} else {
				$client->field_staffelkorting->set($sk);
				$client->save();
			}
		} else {
			// leave the client as it is
		}
	}
}

function feneko_migrate_csv_users() {
	$clients = $emails = $dups = array();
	$csvPath = "private://users.csv";
	$file = fopen($csvPath, 'r');
	while (($line = fgetcsv($file, 100000, ';')) !== FALSE) {
		$client = trim($line[0]);
		$email = trim($line[4]);
		$phone = trim($line[5]);
		feneko_migrate_handle_phone($phone);

		// emails
		if(!empty($email)) {
			if(isset($emails[$email])) {
				if(empty($email)) {
					// dpm("Emails: Email empty for $phone");
				} else {
					if(!empty($phone)) {
						if(empty($emails[$email])) {
							$emails[$email] = $phone;
						} else {
							if(!isset($dups[$email])) {
								$dups[$email] = array($emails[$email]);
							}
							$dups[$email][] = $phone;
							// dpm("Emails: Duplicate: $email : $phone");
						}
					}
				}
			} else {
				if(empty($phone)) {
					// dpm("Emails: Phone number empty for " . $email);
				} else {
					$emails[$email] = $phone;
				}
			}
		}

		// clients
		if(!empty($client)) {
			if(isset($clients[$client])) {
				// dpm("Clients: Duplicate $client $phone");
			} else {
				if(empty($phone)) {
					// dpm("Clients: Phone number empty for $client");
				} else {
					$clients[$client] = $phone;
				}
			}
		}
	}
	fclose($file);

	// Add same dups to emails if possible
	foreach ($dups as $email => &$values) {
		$values = array_unique($values);
		// if(count($values) === 1) { // we take them all
			$val = array_shift($values);
			if(isset($emails[$email])) {
				if($emails[$email] === $val) {
					unset($dups[$email]);
				} else {
					dpm('Another phone number for this email already exists.');
				}
			} else {
				$emails[$email] = $val;
				unset($dups[$email]);
			}
		// }
	}

	// remove header
	unset($clients['Klantennummer']);
	unset($emails['Emailadres']);

	return compact('clients', 'emails');
}

function feneko_migrate_cleanup() {
	// Get all uids
	$users = entity_load('user');
	$uids = array_keys($users);

	// Remove roles_users not assigned to any user
	$userRoles = db_delete('users_roles')->condition('uid', $uids, 'NOT IN')->execute();
}

function feneko_migrate_handle_phone(&$phone) {
  $phone = str_replace(',', '.', $phone);
  $phone = str_replace('-', '.', $phone);
  $phone = trim($phone);
  $phone = str_replace(' ', '.', $phone);
  $phone = str_replace('..', '.', $phone);
  $phone = str_replace('/.', '/', $phone);
}

