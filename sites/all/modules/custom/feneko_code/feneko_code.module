<?php

#feneko.module

function feneko_code_permission() {
  return array(
    'see the catalog' => array(
      'title' => t('see the catalog'),
      'description' => t('see the catalog'),
    ),
  );
}

function feneko_code_menu(){
  $items['user/%user/logout'] = array(
    'title' => 'Log out',
    'page callback' => 'feneko_user_logout',
    'page arguments' => array('user_profile_form', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['catalog/%/%'] = array(
    'title' => 'Feneko catalog',
    'page callback' => 'feneko_catalog',
    'page arguments' => array(1,2,3),
    'access callback' => 'user_access',
    'access arguments' => array('see the catalog'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'feneko_code.catalog.inc',
  );

  $items['admin/config/feneko_import'] = array(
    'title' => 'Feneko Import',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feneko_code_import_form'),
    'access arguments' => array('admin_manyforms'),
  );

  return $items;
}


/**
 * Implements hook_block_info().
 */
function feneko_code_block_info() {

  $blocks['feneko_code_flipper'] = array(
    'info' => t('link to flipper block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function feneko_code_block_view($delta) {
  switch ($delta) {
    case 'feneko_code_flipper':
    return feneko_code_flipper();

  }
}

/**
 * Render block().
 */
function feneko_code_flipper(){
  global $language;
  $block = array();
  $block['subject'] = 'Catalogus';
  $block['content'] = '<div class="catalogus-links">'.l(t('Colors catalogus'),'catalog/colors/pdf',array(
    'attributes' => array(
      'class' => array('rodeknop'),
      'target'=>'_blank',
    )
    )).'</div><div class="catalogus-links">'.l(t('Screens catalogus'),'catalog/screens/pdf',array(
    'attributes' => array(
      'class' => array('rodeknop'),
      'target'=>'_blank',
    )
    )).'</div>';
  return $block;
}



function feneko_user_logout(){
  global $user;
  module_invoke_all('user_logout', $user);
  session_destroy();
  drupal_set_message(t('You are logged out'));
  drupal_goto('<front>');
}


function feneko_code_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_register_form') {
    $form['#submit'][]  = 'feneko_code_inform_admin';
  }
}

function feneko_code_inform_admin($form, &$form_state) {
  $values = $form_state['values'];
  $body = 'A user registered on feneko.be.
  Please check his/her account and activate it.
  His language is  ' . $values['language'] . '
  The user name is ' . $values['name'] . '
  The BTW nummer is ' . $values['field_btw_nummer']['und'][0]['value'] . '
  The Company is ' . $values['field_bedrijf']['und'][0]['value'] . '
  The telefoon is ' . $values['field_telefoon']['und'][0]['value'] . '
  Administrate the users here: http://feneko.be/admin/people .
  ';
  $to = 'jeremie@fenekobvba.be';
  $from = 'no-reply@feneko.be';
  $header_cc = 'david@fenekobvba.be';
  $header_cc = 'wouters.f@gmail.com';
  $subject = 'User registratie op [feneko.be]';
  $message = drupal_mail(
    'feneko_code',
    'user_registers',
    $to,
    user_preferred_language($user),
    array(
      'body' => $body,
      'subject' => $subject,
      'headers' => array(
        'Cc' => $header_cc,
        'Bcc' => $header_bcc,
      ),
      $from,
      TRUE)
    );
}


function feneko_code_mail($key, &$message, $params){
  if (isset($params['subject'])) {
    $message['subject'] = $params['subject'];
  }
  if (isset($params['body'])) {
    $message['body'][] = $params['body'];
  }
  if (isset($params['headers']) && is_array($params['headers'])) {
    $message['headers'] += $params['headers'];
  }
  switch ($key) {
    case 'user_registers':
      // do something specific for mails of type key1
      break;
   case 'key2':
      // do something specific for mails of type key2
      break;
   }

}


function feneko_code_import_form($form, &$form_state) {
  $form['type'] = array(
    '#type' => "radios",
    '#title' => 'Type upload',
    '#options' => array(
      'ral'     => 'RAL codes',
      'renolit' => 'Renolit codes',
      'utilo'   => 'Utilo profielen',
      'field_data_field_geblokkeerd' => 'Geblokkeerd/EB',
    ),
    '#required' => true,
  );

  $form['file_upload'] = array(
    '#title' => 'Bestand',
    '#type' => 'file',
    '#description' => 'Upload een bestand in CSV formaat.<br/>'
                    . 'RAL codes: 3 Velden gescheiden door een ; dus: kleurcode;poedercode;type<br />'
                    . 'Renolit codes: 3 Velden gescheiden door een ; dus: id;kleurcode;omschrijving<br />'
                    . 'Utilo profielen: ',
  );

  $form['header'] = array(
    '#type' => "checkbox",
    '#title' => 'De eerste lijn overslaan',
    '#description' => 'Het kan dat de eerste lijn de kolom namen bevat. Vink deze optie aan indien de eerste lijn overgeslaan moet worden.',
  );

  $form['submit'] = array(
    '#type' => "submit",
    "#value" => "Importeer",
  );

  return $form;
}

function feneko_code_import_form_submit($form, &$form_state) {
  $file = file_save_upload('file_upload', array('file_validate_extensions' => array('csv')));

  if($file) {
    $table = $form_state['values']['type'];

    // Open the file.
    $handle = fopen($file->uri, "r");

    // Skip the header if needed
    if($form_state['values']['header']) {
      $header = fgetcsv($handle, 0, ';');
    }

    if($table !== 'field_data_field_geblokkeerd') {
      // First clear the table.
      if (db_table_exists($table)) {
        db_truncate($table)->execute();
      }

      $mapping = array(
        'laken std' => 'ral',
        'laken str' => 'str',
        'Laken std' => 'ral',
        'Laken str' => 'str',
      );
    } else {
      $mapping = array('N' => 0, 'J' => 1);
    }

    $num_updated = 0;

    // Loop through the csv file and insert into database.
    while ($data = fgetcsv($handle, 0, ';')) {
      switch ($table) {
        case 'ral':
          if(isset($mapping[$data[2]])) {
            $type = $mapping[$data[2]];
          } else {
            $msg = t("Mapping not found for :mapping. Ignored record.", array(':mapping' => $data[2]));
            drupal_set_message($msg, 'warning');
            continue 2;
          }

          $fields = array(
            'kleur' => drupal_convert_to_utf8($data[0], 'Windows-1252'),
            'ref'   => drupal_convert_to_utf8($data[1], 'Windows-1252'),
            'type'  => $type,
          );
          $num_updated += db_insert($table)->fields($fields)->execute();
          break;

        case 'renolit':
          $fields = array(
            'kleur' => drupal_convert_to_utf8($data[2], 'Windows-1252'),
            'ref'   => drupal_convert_to_utf8($data[1], 'Windows-1252'),
          );
          $num_updated += db_insert($table)->fields($fields)->execute();
          break;

        case 'utilo':
          $fields = array(
            'ref'   => drupal_convert_to_utf8($data[1], 'Windows-1252'),
            'descr' => drupal_convert_to_utf8($data[2], 'Windows-1252'),
            // 'lang'  => drupal_convert_to_utf8($data[3], 'Windows-1252'),
            'lang'  => 'nl',
          );
          $num_updated += db_insert($table)->fields($fields)->execute();
          break;

        case 'field_data_field_geblokkeerd':
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'user')
            ->fieldCondition('field_klantennummer', 'value', $data[0]);

          $result = $query->execute();
          $users_ids = array_keys($result['user']);

          foreach ($users_ids as $uid) {
            $user = user_load($uid);
            $wrapper = entity_metadata_wrapper('user', $user);
            $wrapper->field_geblokkeerd = strtr(strtoupper($data[1]), $mapping);
            $wrapper->save();
            $num_updated++;
          }

          break;
      }


    }
    fclose($handle);

    if($table === 'field_data_field_geblokkeerd') {
      if($num_updated > 0) {
        $msg = t('Er werden :num gebruikers aangepast.', array(':num' => $num_updated));
      }
    } else {
      $msg = t(':num records werden succesvol geÃ¯mporteerd.', array(':num' => $num_updated));
    }

    drupal_set_message($msg);

  } else {
    drupal_set_message(t('Er werd geen bestand meegegeven.'));
  }
}
