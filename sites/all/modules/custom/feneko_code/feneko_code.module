<?php
define('FENEKO_CODE', 'feneko_code');
define('FENEKO_CODE_ORDER_STATUSES_TABLE', 'order_statuses');
define('FENEKO_CODE_RETOUR_TABLE', 'retours');
define('FENEKO_CODE_IMPORT_DELIMITER', ';');
define('FENEKO_OLD', false);

function feneko_code_permission() {
  return array(
    'see the catalog' => array(
      'title' => t('see the catalog'),
      'description' => t('see the catalog'),
    ),
    'post api' => array(
      'title' => t('Post to the API'),
      'description' => t('Post to the API'),
    ),
  );
}

function feneko_code_access() {
  foreach (func_get_args() as $permission) {
    if(!user_access($permission)) {
      // dpm($permission);
      return false;
    }
  }
  return true;
}

function feneko_code_menu(){
  if(FENEKO_OLD) {
    $items['user/%user/logout'] = array(
      'title' => 'Log out',
      'page callback' => 'feneko_user_logout',
      'page arguments' => array('user_profile_form', 1),
      'access callback' => 'user_edit_access',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
    );
  }

  $items['catalog/%/%'] = array(
    'title' => 'Feneko catalog',
    'page callback' => 'feneko_catalog',
    'page arguments' => array(1,2,3),
    'access callback' => 'user_access',
    'access arguments' => array('see the catalog'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'feneko_code.catalog.inc',
  );

  $items['admin/config/feneko_import'] = array(
    'title' => 'Feneko Import',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feneko_code_import_form'),
    'access arguments' => array('admin_manyforms'),
    'file' => 'feneko_code.import.inc',
  );

  $items['user/%/feneko_orders'] = array(
    'title' => 'Lopende orders',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feneko_code_orders_form', FALSE),
    'access arguments' => array('submit_manyforms'),
    'file' => 'feneko_code.orders.inc',
  );

  $items['user/%/retour'] = array(
    'title' => 'Retouropdracht',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feneko_code_retours_form', FALSE),
    'access arguments' => array('submit_manyforms'),
    'file' => 'feneko_code.retour.inc',
  );

  return $items;
}


/**
 * Implements hook_block_info().
 */
function feneko_code_block_info() {
  if(FENEKO_OLD) {
    $blocks['feneko_code_flipper'] = array(
      'info' => t('link to flipper block'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    );
    return $blocks;
  }
}


/**
 * Implements hook_block_view().
 */
function feneko_code_block_view($delta) {
  if(FENEKO_OLD) {
    switch ($delta) {
      case 'feneko_code_flipper':
      return feneko_code_flipper();
    }
  }
}


/**
 * Render block().
 */
function feneko_code_flipper(){
  global $language;
  $block = array();
  $block['subject'] = 'Catalogus';
  $block['content'] = '<div class="catalogus-links">'.l(t('Colors catalogus'),'catalog/colors/pdf',array(
    'attributes' => array(
      'class' => array('rodeknop'),
      'target'=>'_blank',
    )
    )).'</div><div class="catalogus-links">'.l(t('Screens catalogus'),'catalog/screens/pdf',array(
    'attributes' => array(
      'class' => array('rodeknop'),
      'target'=>'_blank',
    )
    )).'</div>';
  return $block;
}


function feneko_user_logout(){
  if(FENEKO_OLD) {
    global $user;
    module_invoke_all('user_logout', $user);
    session_destroy();
    drupal_set_message(t('You are logged out'));
    drupal_goto('<front>');
  }
}


function feneko_code_form_alter(&$form, &$form_state, $form_id) {
  if(FENEKO_OLD) {
    if ($form_id == 'user_register_form') {
      $form['#submit'][]  = 'feneko_code_inform_admin';
    }
  }
}

function feneko_code_get_clients_options($idKeys = false) {
  global $user;
  $options = array();
  $wrapper = entity_metadata_wrapper('user', $user);
  foreach ($wrapper->field_clients->value() as $client) {
    if(!empty($client)) {
      $client_number = $client->field_client_number[LANGUAGE_NONE][0]['value'];
      $key = $idKeys ? $client->nid : $client_number;
      $options[$key] = $client->title . " ($client_number)";
    } else {
      $msg = t('The user (:user) is linked to an invalid client', array(':user' => $user->uid));
      drupal_set_message($msg, 'error');
    }
  }
  return $options;
}

/**
 * @param $number client number
 * @return EntityMetadataWrapper
 */
function feneko_code_get_client_by_number($number) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'client')
            ->fieldCondition('field_client_number', 'value', $number)
            ->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $clients = entity_load('node', $nids);
  }

  switch (count($clients)) {
    case 0:
      watchdog('feneko', 'Client number :num not found', array(':num' => $number));
      return null;

    case 1:
      return entity_metadata_wrapper('node', key($clients));

    default:
      watchdog('feneko', 'Client number :num has multiple nids', array(':num' => $number));
      return entity_metadata_wrapper('node', key($clients));
      break;
  }
}


function feneko_code_inform_admin($form, &$form_state) {
  if(FENEKO_OLD) {
    $values = $form_state['values'];
    $body = 'A user registered on feneko.be.
    Please check his/her account and activate it.
    His language is  ' . $values['language'] . '
    The user name is ' . $values['name'] . '
    The BTW nummer is ' . $values['field_btw_nummer']['und'][0]['value'] . '
    The Company is ' . $values['field_naam_bedrijf']['und'][0]['value'] . '
    The telefoon is ' . $values['field_telefoon']['und'][0]['value'] . '
    Administrate the users here: http://feneko.be/admin/people .
    ';
    $to = 'jeremie@fenekobvba.be';
    $from = 'no-reply@feneko.be';
    $header_cc = 'david@fenekobvba.be';
    $header_cc = 'wouters.f@gmail.com';
    $subject = 'User registratie op [feneko.be]';
    $message = drupal_mail(
      'feneko_code',
      'user_registers',
      $to,
      user_preferred_language($user),
      array(
        'body' => $body,
        'subject' => $subject,
        'headers' => array(
          'Cc' => $header_cc,
          'Bcc' => $header_bcc,
        ),
        $from,
        TRUE
      )
    );
  }
}


/*
function feneko_code_mail($key, &$message, $params){
  if (isset($params['subject'])) {
    $message['subject'] = $params['subject'];
  }
  if (isset($params['body'])) {
    $message['body'][] = $params['body'];
  }
  if (isset($params['headers']) && is_array($params['headers'])) {
    $message['headers'] += $params['headers'];
  }
  switch ($key) {
    case 'user_registers':
      // do something specific for mails of type key1
      break;
   case 'key2':
      // do something specific for mails of type key2
      break;
   }
}
*/

/**
 * Implements of hook_services_resources().
 */
function feneko_code_services_resources() {
  $api = array(
    'order_statuses' => array(
      'operations' => array(
        'create' => array(
          'help' => 'Updates the statuses of orders',
          'callback' => '_feneko_order_statuses_service',
          'access arguments' => array('post api'),
          'file' => array(
            'type' => 'inc',
            'module' => 'feneko_code',
            'name' => 'feneko_code.import',
          ),
          'args' => array(
            array(
              'name' => 'file',
              'type' => 'string',
              'description' => 'File to upload',
              'source' => array('data' => 'file'),
            ),
          ),
        ),
      ),
    ),
  );
  return $api;
}
