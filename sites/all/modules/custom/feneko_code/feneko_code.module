<?php
define('FENEKO_CODE', 'feneko_code');
define('FENEKO_CODE_ORDER_STATUSES_TABLE', 'order_statuses');
define('FENEKO_CODE_RETOUR_TABLE', 'retours');
define('FENEKO_CODE_IMPORT_DELIMITER', ';');

function feneko_code_permission() {
  return array(
    'see the catalog' => array(
      'title' => t('see the catalog'),
      'description' => t('see the catalog'),
    ),
    'post api' => array(
      'title' => t('Post to the API'),
      'description' => t('Post to the API'),
    ),
    'feneko admin' => array(
      'title' => 'Administer order modules',
      'restrict access' => TRUE,
    ),
    'feneko order' => array(
      'title' => 'Submit orders',
      'restrict access' => TRUE,
    ),
  );
}

function feneko_code_allow_order() {
  // Make sure the user has the "feneko order" permission
  if(user_access('feneko order')) {
    // OK: continue checks
  } else {
    // $msg = t('You don\'t have a role having "feneko order" permission. Contact the administrator.');
    // drupal_set_message($msg, 'warning');
    return false;
  }

  // Check that the user has at least 1 client assigned to it
  $clients = feneko_code_get_clients_options(true);
  if(count($clients) > 0) {
    // OK
  } else {
    // $msg = t('You don\'t have any clients assigned. Contact the administrator.');
    // drupal_set_message($msg, 'warning');
    return false;
  }

  return true;
}

function feneko_code_menu(){
  $items['catalog/%/%'] = array(
    'title' => 'Feneko catalog',
    'page callback' => 'feneko_catalog',
    'page arguments' => array(1,2,3),
    'access arguments' => array('see the catalog'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'feneko_code.catalog.inc',
  );

  $items['admin/config/feneko_import'] = array(
    'title' => 'Feneko Import',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feneko_code_import_form'),
    'access arguments' => array('feneko admin'),
    'file' => 'feneko_code.import.inc',
  );

  $items['user/%/feneko_orders'] = array(
    'title' => 'Lopende orders',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feneko_code_orders_form', FALSE),
    'access callback' => array('feneko_code_allow_order'),
    'file' => 'feneko_code.orders.inc',
  );

  $items['user/%/retour'] = array(
    'title' => 'Retouropdracht',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feneko_code_retours_form', FALSE),
    'access callback' => array('feneko_code_allow_order'),
    'file' => 'feneko_code.retour.inc',
  );

  return $items;
}



/**
 * Render block().
 */
function feneko_code_flipper(){
  global $language;
  $block = array();
  $block['subject'] = 'Catalogus';
  $block['content'] = '<div class="catalogus-links">'.l(t('Colors catalogus'),'catalog/colors/pdf',array(
    'attributes' => array(
      'class' => array('rodeknop'),
      'target'=>'_blank',
    )
    )).'</div><div class="catalogus-links">'.l(t('Screens catalogus'),'catalog/screens/pdf',array(
    'attributes' => array(
      'class' => array('rodeknop'),
      'target'=>'_blank',
    )
    )).'</div>';
  return $block;
}


/**
 * @param $idKeys bool
 *   true: keys will be client IDs
 *   false: keys will be client numbers
 * @todo cache this
 */
function feneko_code_get_clients_options($idKeys = false) {
  global $user;

  // $idKeysString = $idKeys ? '1' : '0';
  // $cid = 'fc_clients' . ':' . $user->uid . ':' . $idKeysString;

  // $options = &drupal_static($cid);

  // if (!isset($options)) {
  //   if ($cache = cache_get($cid)) {
  //     $options = $cache->data;
  //   }
    // else {
      // Do your expensive calculations here, and populate $options
      // with the correct stuff..
      $options = array();
      $wrapper = entity_metadata_wrapper('user', $user);

      // Interne medewerker needs to have access to all clients
      if(in_array('interne medewerker', $user->roles)) {
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
              ->entityCondition('bundle', 'client');
        $result = $query->execute();
        if (isset($result['node'])) {
          $nids = array_keys($result['node']);
          $clients = entity_load('node', $nids);
        }
      } else {
        $clients = $wrapper->field_clients->value();
      
}
      // Build the options array
      foreach ($clients as $client) {
        if(!empty($client)) {
          $client_number = $client->field_client_number[LANGUAGE_NONE][0]['value'];
          $key = $idKeys ? $client->nid : $client_number;
          $options[$key] = $client->title . " ($client_number)";
        } else {
          $msg = t('The user (:user) is linked to an invalid client', array(':user' => $user->uid));
          drupal_set_message($msg, 'error');
        }
      }

      // Finally populate the cache
      // cache_set($cid, $options, 'cache');
  //   }
  // }
  natcasesort($options);
  return $options;
}

/**
 * @param $number client number
 * @return EntityMetadataWrapper
 */
function feneko_code_get_client_by_number($number) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'client')
            ->fieldCondition('field_client_number', 'value', $number)
            ->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    $clients = entity_load('node', $nids);
  }

  switch (count($clients)) {
    case 0:
      watchdog('feneko', 'Client number :num not found', array(':num' => $number));
      return null;

    case 1:
      return entity_metadata_wrapper('node', key($clients));

    default:
      watchdog('feneko', 'Client number :num has multiple nids', array(':num' => $number));
      return entity_metadata_wrapper('node', key($clients));
      break;
  }
}

/**
 * Implements of hook_services_resources().
 */
function feneko_code_services_resources() {
  $api = array(
    'order_statuses' => array(
      'operations' => array(
        'create' => array(
          'help' => 'Updates the statuses of orders',
          'callback' => '_feneko_order_statuses_service',
          'access arguments' => array('post api'),
          'file' => array(
            'type' => 'inc',
            'module' => 'feneko_code',
            'name' => 'feneko_code.import',
          ),
          'args' => array(
            array(
              'name' => 'file',
              'type' => 'string',
              'description' => 'File to upload',
              'source' => array('data' => 'file'),
            ),
          ),
        ),
      ),
    ),
  );
  return $api;
}

function feneko_code_user_update(&$edit, $account, $category) {
  // Clear the clients cache for the user that has been changed
  $cid = 'fc_clients' . ':' . $account->uid;
  cache_clear_all($cid, 'cache', TRUE);
}


function fc_ral_search_by_kleur($kleur) {
  $result = array();
  $query = db_select('ral', 'r')->fields('r')
                                ->condition('kleur', $kleur)
                                ;
  $result = $query->execute()->fetchAssoc();

  return $result;

}

function _fc_clean_order_statuses() {
  $or = db_or()
          ->condition('fase', 'GEFACTUREERD')
          ->condition('fase', 'GEBLOKKEERD')
          ->condition('fase', 'GEANNULEERD')
        ;
  $num = db_delete(FENEKO_CODE_ORDER_STATUSES_TABLE)->condition($or)->execute();
}
