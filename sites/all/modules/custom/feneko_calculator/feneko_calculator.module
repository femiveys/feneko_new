<?php
/**
 * @file
 */

require_once 'CsvLine.php';
require_once 'CsvHandler.php';
require_once 'Helper.php';

define('FC_PATH', "private://calculator");
define('FC_NO_COLOR', "brut");
define('FC_PB_SPECIAL', "special");

global $fc_currency_settings;
$fc_currency_settings = array(
  'currencies' => array('EUR' => array('decimals' => 2)),
);


function feneko_calculator_menu() {
  $items['import/fc_convert_mdb'] = array(
    'title' => 'Convert MDB to CSVs',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'fc_convert_mdb',
    'access arguments' => array('admin_manyforms'), // TODO set right permissions
  );
  $items['import/fc_preprocess'] = array(
    'title' => 'Preprocess Calculator Files',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'fc_preprocess',
    'access arguments' => array('admin_manyforms'), // TODO set right permissions
  );
  $items['cart/init'] = array(
    'title' => 'Kies kleur',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fc_cart_init_form'),
    'access arguments' => array('submit_manyforms'), // TODO set right permissions
  );
  $items['calculator/colors'] = array(
    'description' => 'colors autocomplete callback',
    'page callback' => 'fc_colors_autocomplete',
    'access arguments' => array('submit_manyforms'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/commerce/config/feneko'] = array(
    'title' => 'Feneko',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feneko_calculator_settings_form'),
    'file' => 'feneko_calculator.admin.inc',
    'access arguments' => array('admin_manyforms'),
  );
  $items['admin/commerce/config/feneko/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feneko_calculator_settings_form'),
    'file' => 'feneko_calculator.admin.inc',
    'access arguments' => array('admin_manyforms'),
  );
  $items['admin/commerce/config/feneko/import'] = array(
    'title' => 'Import',
    'weight' => 200,
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'fc_goto',
    'access arguments' => array('admin_manyforms'), // TODO set right permissions
  );
  $items['admin/commerce/orders/%/zppdf'] = array(
    'title' => 'PDF (Zonder prijs)',
    'type' => MENU_LOCAL_TASK,
    'file' => 'feneko_calculator.mpdf.inc',
    'page callback' => 'fc_get_attachment',
    'page arguments' => array(3, false, true),
    'access arguments' => array('admin_manyforms'), // TODO set right permissions
    'parent' => 'admin/commerce/orders/%commerce_order',
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/orders/%/pdf'] = array(
    'title' => 'PDF',
    'type' => MENU_LOCAL_TASK,
    'file' => 'feneko_calculator.mpdf.inc',
    'page callback' => 'fc_get_attachment',
    'page arguments' => array(3, false),
    'access arguments' => array('admin_manyforms'), // TODO set right permissions
    'parent' => 'admin/commerce/orders/%commerce_order',
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/orders/%commerce_order/xml'] = array(
    'title' => 'XML',
    'type' => MENU_LOCAL_TASK,
    'file' => 'feneko_calculator.admin.inc',
    'page callback' => 'feneko_calculator_xml',
    'page arguments' => array(3),
    'access arguments' => array('admin_manyforms'), // TODO set right permissions
    'parent' => 'admin/commerce/orders/%commerce_order',
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  return $items;
}

/**
 * Implements hook_variable_info
 */
function feneko_calculator_variable_info($options) {
  $variable = array(
    'fc_order_email_text' => array(
      'type' => 'string',
      'title' => t('Feneko calculator: Client e-mail text for an order', array(), $options),
      'description' => t('Text of the email that will be sent to user who has submitted an order'),
    ),
    'fc_offer_email_text' => array(
      'type' => 'string',
      'title' => t('Feneko calculator: Client e-mail text for an offer', array(), $options),
      'description' => t('Text of the email that will be sent to user who has submitted an offer'),
    ),
    'fc_submiting_text' => array(
      'type' => 'string',
      'title' => t('Feneko calculator: After submit message', array(), $options),
      'description' => t('Text that will be shown to the user after successfull form submission'),
    ),
  );
  return $variable;
}

/**
 * Implements hook_preprocess_html
 */
function feneko_calculator_preprocess_html(&$vars) {
  if(isset($vars['page']['content']['system_main']['nodes'])) {
    $nodes = &$vars['page']['content']['system_main']['nodes'];
    if(count($nodes) === 2) {
      foreach ($nodes as $key => $value) {
        if($key[0] !== '#') {
          if($value['#node']->type === 'product' && isset($value['#node']->field_orderable_products)) {
            if(count($value['#node']->field_orderable_products) === 0) {
              $vars['classes_array'][] = 'no-orderable-products';
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_theme_registry_alter
 */
function feneko_calculator_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'feneko_calculator');
  $theme_registry['commerce_order__backoffice']['path'] = "$path/templates";
  $theme_registry['commerce_order__backoffice']['template'] = "order";
}

/**
 * Implements hook_file_download
 */
function feneko_calculator_file_download($uri) {
  // TODO: MAke specific
  $info = image_get_info($uri);
  return array('Content-Type' => $info['mime_type']);
}

/**
 * Implements hook_rules_action_info_alter
 */
function feneko_calculator_rules_action_info_alter(&$actions) {
  $actions['commerce_cart_add_to_cart_message']['callbacks']['execute'] =
  'fc_custom_cart_callback';
}

/**
 * Implements hook_mail_alter
 */
function feneko_calculator_mail_alter(&$message) {
  $mail_id_patterns = array(
    'client' => 'rules_rules_action_mail_commerce_checkout_send_e_mail_client',
    'feneko' => 'rules_rules_action_mail_commerce_checkout_send_e_mail_feneko',
  );
  if (strpos($message['id'], $mail_id_patterns['client']) !== false
   or strpos($message['id'], $mail_id_patterns['feneko']) !== false) {
    // Take the order ID from the title
    preg_match("/(\d+)/", $message['subject'], $matches);
    $order_id = $matches[0];
    $order = entity_metadata_wrapper('commerce_order', $order_id);

    // Attach the pdf
    module_load_include('inc', 'feneko_calculator', 'feneko_calculator.mpdf');
    $attachment = array(
      'filecontent' => fc_get_attachment($order_id),
      'filename' => "$order_id.pdf",
      'filemime' => 'application/pdf',
    );
    $message['params']['attachments'][] = $attachment;

    if(strpos($message['id'], $mail_id_patterns['feneko']) !== false) {
      // For feneko mail

      // Set the to
      $message['to'] = variable_get('fc_notification_email');

      // Set the body
      $body = variable_get('fc_notification_email_text') ;

       // Attach the XML for the mail to Feneko
      module_load_include('inc', 'feneko_calculator', 'feneko_calculator.admin');
      $attachment = array(
        'filecontent' => feneko_calculator_order_to_xml($order->value()),
        'filename' => "$order_id.xml",
        'filemime' => 'text/xml',
      );
      $message['params']['attachments'][] = $attachment;
    } else {
      // For mail to client
      $body = $order->field_order_type->value() === 'order'
            ?  variable_get('fc_order_email_text')
            :  variable_get('fc_offer_email_text');
    }

    // Set the body and apply the replacements
    $body = str_replace('{name}', $order->owner->name->value(), $body);
    $body = str_replace('{company}', $order->owner->field_naam_bedrijf->value(), $body);
    $body = str_replace('{klantennummer}', $order->field_order4->value(), $body);
    $body = str_replace('{client_number}', $order->field_order4->value(), $body);
    $message['body'][0] = $body;

    // Attach drawings
    fc_add_drawings_attachments($order_id, $message);
  }
}


function feneko_calculator_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  // Make sure it's the correct view
  if($view->name == 'feneko_orders') {
    drupal_add_css(drupal_get_path('module', 'commerce_backoffice') .'/theme/commerce-backoffice.css');
    drupal_add_css(drupal_get_path('module', 'commerce_backoffice') .'/theme/commerce-backoffice-order.css');
    // drupal_add_css(drupal_get_path('module', 'commerce_backoffice') .'/theme/commerce-backoffice-products.css');
  }
}


/**
 * Implementats hook_commerce_price_component_type_info().
 * Creates a new price component type
 */
function feneko_calculator_commerce_price_component_type_info(){
  return array(
    'minimum_invoice_amount' => array(
      'title' => t('Minimum invoice amount'),
      'weight' => -10,
    ),
  );
}


/**
 * Implements hook_form_alter
 */
function feneko_calculator_form_alter(&$form, &$form_state, $form_id) {
  // Add an export button to the orders form, but not to the confirm page
  if($form_id === 'views_form_feneko_orders_admin_page' and empty($form['confirm'])) {
    $form['export'] = array(
      '#type' => 'submit',
      '#value' => t('Exporteer geselecteerde orders'),
      '#submit' => array('fc_export_orders_submit'),
    );
  }

  // The cart form
  if($form_id === 'views_form_commerce_cart_form_feneko_default') {
    $form['actions']['checkout']['#value'] = t('Bereken korting');
    $form['actions']['step'] = array(
      '#markup' => t('Stap !stap', array('!stap' => "1/2")),
      '#weight' => -100,
    );
  }

  // Checkout page
  if($form_id === 'commerce_checkout_form_checkout'
    and $form_state['checkout_page']['page_id'] === 'checkout') {
    $form['buttons']['step'] = array(
      '#markup' => t('Stap !stap', array('!stap' => "2/2")),
      '#weight' => -100,
    );

    $form['commerce_fieldgroup_pane__group_order_info']
         ['field_order4']['und']['#options'] = feneko_code_get_clients_options();
  }

  if (strpos($form_id, 'views_form_commerce_cart_form_') === 0) {
    if(isset($form['edit_delete'])) {
      foreach ($form['edit_delete'] as $key => &$row) {
        if($key[0] != '#') {
          // First we unset the value to add it again afterwards
          foreach ($row['#submit'] as $k => &$value) {
            if($value == 'commerce_cart_line_item_delete_form_submit') {
              unset($row['#submit'][$k]);
            }
          }
          $row['#submit'][] = 'fc_line_item_delete_form_submit';
        }
      }
    }
  }

  // Alter the Exposed Filters for orders page
  // We need this as we have overridden the view
  // Code is taken from commerce_backoffice_order.module and commerce_backoffice.module
  if (isset($form['submit']['#id']) && $form['submit']['#id'] == 'edit-submit-feneko-orders') {
    $form['status']['#attributes'] = array('data-placeholder' => array(t('All statuses')));
    $form['combine']['#attributes'] = array('placeholder' => array(t('Search by username, email, order ID')));
  }
  // Add the korting names to the staffelkorting
  if(isset($form['field_staffelkorting']['und']['#options'])) {
    $options = array();

    // Get all order discounts
    $result = db_select('commerce_discount')->fields(NULL, array('name'))
             ->condition('type', 'order_discount')
             ->orderBy('component_title')
             ->execute();

    foreach ($result as $discount) {
      $discount_wrapper = entity_metadata_wrapper('commerce_discount', $discount->name);
      $options[$discount->name] = $discount_wrapper->component_title->value();
    }

    // Add the options to the form
    $form['field_staffelkorting']['und']['#options'] = $options;

    // Set the default value for user or node (client)
    if(isset($form_state['user'])) {
      $type = 'user';
    } elseif(isset($form_state['node'])) {
      $type = 'node';
    }

    if(isset($type)) {
      if(isset($form_state[$type]->field_staffelkorting['und'][0]['value'])) {
        $form['field_staffelkorting']['und']['#default_value'] =
                   $form_state[$type]->field_staffelkorting['und'][0]['value'];
      }
    }
  }
}


/**
 * We need this as we have overridden the view
 * Code is taken from commerce_backoffice_order.module and commerce_backoffice.module
 */
function feneko_calculator_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  if ($form_state['step'] == 'views_form_views_form' && $vbo->view->name === 'feneko_orders') {
    $form['select']['#title'] = '';
    $form['select']['#collapsible'] = FALSE;
    $form['select']['submit']['#value'] = t('Apply');
    $form['select']['operation']['#options'][0] = t('Bulk operations');
    $form['select']['#weight'] = 99999;
  }
}


/**
 * Removes the action links from pages containing backoffice views, they
 * will be rendered as a part of the view itself.
 * We need this as we have overridden the view
 * Code is taken from commerce_backoffice_order.module and commerce_backoffice.module
 */
function feneko_calculator_preprocess_page(&$vars) {
  $view = views_get_page_view();

  if (isset($view->name) and $view->name === 'feneko_orders') {
    $vars['action_links'] = '';
  }
}

/**
 * Adds the action links to $attachment_before (below the exposed filters).
 * We need this as we have overridden the view
 * Code is taken from commerce_backoffice_order.module and commerce_backoffice.module
 */
function feneko_calculator_views_pre_build(&$view) {
  if ($view->name === 'feneko_orders') {
    $actions = menu_local_actions();
    $view->attachment_before = '<ul class="action-links">' . drupal_render($actions) . '</ul>';
  }
}


/**
 * Implements hook_field_extra_fields().
 */
function feneko_calculator_field_extra_fields() {
  $configuration = array(
    'label' => t('Detailed description'),
    'description' => t('Detailed description of the line item contents'),
    'weight' => 0,
    'callback' => 'fc_line_item_details',
    'file' => drupal_get_path('module', 'feneko_calculator') . '/extra_fields.inc',
  );

  $extra['commerce_line_item']['muurkap']['display']['detail'] = $configuration;
  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function feneko_calculator_entity_view($entity, $type, $view_mode, $langcode) {
  // Only show the field for commerce_line_item entities
  if ($type === 'commerce_line_item') {
    $entity->content['detail'] = array(
      '#markup' => fc_line_item_details($entity),
    );
  }
}


/**
 * Implements hook_commerce_cart_order_empty().
 */
function feneko_calculator_commerce_cart_order_empty($order) {
  $order->field_color = array();
  $order->field_reference = array();
  $order->field_comment = array();
  $order->field_order_type = array();
  commerce_order_save($order);
}


/**
 * Implements hook_form_FORM_ID_alter()
 */
function feneko_calculator_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state, $form_id) {
  // GENERIC STUFF

  // Workaround for AJAX bug described in https://www.drupal.org/node/1181370
  $action = isset($form_state['values']['action'])
                   ? $form_state['values']['action'] : $form['#action'];
  $form['#action'] = $action;
  $form['action'] = array(
    '#type' => 'value',
    '#value' => $action,
  );

  // Make sure the color has been set and display the color
  // Prepare the destination for links
  $url_options = array('query' => drupal_get_destination());

  // Load the cart and create one if needed
  global $user;

  if(!$user) return;

  $cart = commerce_cart_order_load($user->uid);

  if(!$cart && $user->uid) {
    $cart = commerce_cart_order_new($user->uid);
    watchdog('feneko_calculator', 'No cart found for current user. We just created one.');
  }

  $cart_wrapper = entity_metadata_wrapper('commerce_order', $cart);

  // If no color has been set in the cart go to choose a color
  $text = $cart_wrapper->field_color->value();
  if(empty($text)) {
    drupal_goto('cart/init', $url_options);
  }

  list($color, $color_ra, $change_color_link)
              = _fc_color_ra($cart_wrapper, $url_options);
  $form['color'] = $color_ra;

  // Add a validator to prepare some values
  $form['#validate'][] = 'fc_validate_add_to_cart_form';

  // START PRODUCT SPECIFIC STUFF
  $product = commerce_product_load($form['product_id']['#value']);
  $ajax = array(
    'callback' => 'commerce_cart_add_to_cart_form_attributes_refresh',
    'event' => 'fc_change',
  );

  switch ($product->type) {
    case 'plaatbewerking':
      if(isset($form['line_item_fields']['field_lakzijde']['und']['#default_value'][0])) {
        $lakzijde = $form['line_item_fields']['field_lakzijde']['und']['#default_value'][0];
      } else {
        $lakzijde = 'e';
      }

      // Make sure the afwerking is set correctly
      $options = array('lakzijde' => $lakzijde, 'color' => $color);
      _fc_check_afwerking($form, $form_state, $options);

      // Add AJAX
      $form['line_item_fields']['field_type_bewerking']['und']['#ajax'] = $ajax;
      $form['line_item_fields']['field_lakzijde']['und']['#ajax'] = $ajax;
      $form['line_item_fields']['field_lengte']['und'][0]['value']['#ajax'] = $ajax;

      $typeBewerking = $form['line_item_fields']['field_type_bewerking']['und']
                                                          ['#default_value'][0];

      // Special is totally different
      if($typeBewerking === FC_PB_SPECIAL) {
        // Hide multi-breedte and multi-hoek field
        $form['line_item_fields']['field_multi_breedte']['#access'] = FALSE;
        $form['line_item_fields']['field_multi_hoek']['#access'] = FALSE;

        // Make the file upload mandatory
        $form['line_item_fields']['field_tekening']['#required'] = TRUE;

      } else {
        // Hide the breedte, plooien and tekening field
        $form['line_item_fields']['field_breedte']['#access'] = FALSE;
        $form['line_item_fields']['field_plooien']['#access'] = FALSE;
        $form['line_item_fields']['field_tekening']['#access'] = FALSE;

        // Change the type image
        $weight = $form['line_item_fields']['field_lakzijde']['#weight'] + 0.1;
        $form['type_image'] = _fc_get_plaatbewerking_image($typeBewerking . $lakzijde, $weight);

        // If lengte = 4000: only gaatjes or lasbouten; no haakjes
        if($form['attributes']['field_sandwichpaneel_lengte']['#default_value'] == 4000) {
          unset($form['line_item_fields']['field_ophanging']['und']['#options']['E']);
          unset($form['line_item_fields']['field_ophanging']['und']['#options']['D']);
        }

        // Als dubbel gelakt: Geen lasbouten mogelijk
        if($lakzijde === 'r') {
          unset($form['line_item_fields']['field_ophanging']['und']['#options']['G']);
        }

        // Disable some fields based on the Type Bewerking
        fc_disable_multi_fields($form, $form_state, fc_get_parts($typeBewerking));

        // Improve the Multi-Breedte field
        $multiBreedte = &$form['line_item_fields']['field_multi_breedte'][LANGUAGE_NONE];
        $multiBreedte['#title'] = t('Breedte stukken');
        $breedte = 0;
        for($i = 0; $i < 5; $i++) {
          $multiBreedte[$i]['value']['#title'] = chr(97 + $i);
          $multiBreedte[$i]['value']['#size'] = 4;
          $multiBreedte[$i]['#nodrag'] = TRUE;
          if(empty($multiBreedte[$i]['value']['#default_value'])) {
            $multiBreedte[$i]['value']['#default_value'] = 0;
          }
        }

        // Improve the Multi-Hoek field
        $multiHoek = &$form['line_item_fields']['field_multi_hoek'][LANGUAGE_NONE];
        $multiHoek['#title'] = t('Hoeken');
        for($i = 0; $i < 4; $i++) {
          $multiHoek[$i]['value']['#title'] = "x" . ($i+1);
          $multiHoek[$i]['value']['#size'] = 4;
          $multiHoek[$i]['#nodrag'] = TRUE;
          // if(!$form_state['process_input']) {
          //   $multiHoek[$i]['value']['#default_value'] = 0;
          // }
        }
      }


      // Do some color type specific stuff
      switch ($color['type']) {
        case 'brut':
          // For brut color, we need to make sure no lakzijden or ophanging can be chosen
          $form['line_item_fields']['field_lakzijde']['und']['#disabled'] = true;
          $form['line_item_fields']['field_ophanging']['und']['#disabled'] = true;
          break;

        case 'reno':
          // For reno color, only 1 lakzijde can be chosen
          unset($form['line_item_fields']['field_lakzijde']['und']['#options']['r']);

          // Whene don't want to be able to choose 2mm and we don't need ophanging
          unset($form['attributes']['field_plaatbewerking_dikte']['#options']['2mm']);
          $form['attributes']['field_plaatbewerking_dikte']['#disabled'] = TRUE;
          $form['line_item_fields']['field_ophanging']['#disabled'] = TRUE;

          // break; We don't break as for renolit, also the image needs to change

        default:
          // For all, it should not be possible to choose no lakzijde
          unset($form['line_item_fields']['field_lakzijde']['und']['#options']['_none']);
          break;

      }

      // ophanging wordt ALTIJD ingevuld als de kleur <> Brut/Kleur <> Anodise/ Kleur <> renolit
      if( $color['type']  !== 'brut'
      and $color['type']  !== 'reno'
      and $color['kleur'] !== "ANODISE") {
        unset($form['line_item_fields']['field_ophanging']['und']['#options']['_none']);
      }

      break;

    case 'sandwichpaneel':
      // Handle bicolor field
      $bicolor_field = &$form['line_item_fields']['field_bicolor_kleur']['und'][0]['value'];

      // Add AJAX
      $form['line_item_fields']['field_lengte']['und'][0]['value']['#ajax'] = $ajax;
      $bicolor_field['#ajax'] = $ajax;
      $bicolor_field['#autocomplete_path'] = 'calculator/colors';

      // Fill in the current bicolor by default if nothing has been touched
      if(!isset($form_state['triggering_element'])) {
        $bicolor_field['#default_value'] = $color['text'];
      }

      // Make sure the afwerking is set correctly
      $bicolor_text = empty($bicolor_field['#default_value'])
                               ? FC_NO_COLOR : $bicolor_field['#default_value'];
      $bicolor = _fc_get_color($bicolor_text);
      $options = array('color' => $color, 'bicolor' => $bicolor);
      _fc_check_afwerking($form, $form_state, $options);

      break;

    case 'standaardprofiel':
      // Make sure the afwerking is set correctly
      $options = array('color' => $color, 'change_color_link' => $change_color_link);
      if(_fc_check_afwerking($form, $form_state, $options) === false) return array();

      $type = $form['attributes']['field_standaardprofiel_type']['#default_value'];
      $title = $form['attributes']['field_standaardprofiel_type']['#options'][$type];
      $weight = $form['attributes']['field_standaardprofiel_type']['#weight'] - 0.1;
      $form['type_image'] = _fc_get_standaardprofiel_image($type, $title, $weight);
      break;

    case 'dorpel_hoek':
    case 'dorpel_eindstuk':
    case 'dorpel_koppelstuk':
      // Make sure the afwerking is set correctly
      $options = array(
        'color' => $color,
        'reno_block' => TRUE,
        'change_color_link' => $change_color_link,
      );

      if(_fc_check_afwerking($form, $form_state, $options) === false) return;

      break;

    case 'dorpel_anti_dreunstrook':
      unset($form['color']);
      break;

    case 'raamtablet':
    case 'muurkap':
      // Make sure the afwerking is set correctly
      $options = array('color' => $color, 'change_color_link' => $change_color_link);
      if(_fc_check_afwerking($form, $form_state, $options) === false) return;

      // Add AJAX
      $form['line_item_fields']['field_lengte']['und'][0]['value']['#ajax'] = $ajax;

      // Improve the einstukken and hoeken
      if(isset($form_state['input']['attributes']['field_muurkap_type'])) {
        $muurkap_type = $form_state['input']['attributes']['field_muurkap_type'];
      } elseif(isset($form['attributes']['field_muurkap_type']['#default_value'])) {
        $muurkap_type = $form['attributes']['field_muurkap_type']['#default_value'];
      } else {
        $muurkap_type = NULL;
      }

      $mapping = fc_get_multi_field_mapping($muurkap_type);

      foreach ($mapping as $name => $values) {
        $field = &$form['line_item_fields'][$name]['und'];
        if($product->type === 'raamtablet' and $color['type'] === 'reno') {
          // Hide the whole field for renolit raamtabletten
          $field['#access'] = false;
        } else {
          // Hide main title
          // $field['#title_display'] = 'invisible';

          // Add AJAX and change title of the parts
          foreach ($values as $i => $title) {
            // NULL titles have to be hidden and the value has to be reset
            if(is_null($title)) {
              $field[$i]['value']['#default_value'] = 0;
              $field[$i]['value']['#disabled'] = TRUE;
            } else {
              // $field[$i]['value']['#ajax'] = $ajax;
              $field[$i]['value']['#title'] = $title;
              $field[$i]['#nodrag'] = TRUE;
            }

            // Set default values on page load
            if(isset($form_state['process_input']) && $form_state['process_input']) {
            } else {
              $field[$i]['value']['#default_value'] = 0;
            }
          }
        }
      }

      if($product->type === 'raamtablet') {
        // Remove the koppelstukken for raamtabletten reno
        if($color['type'] === 'reno') {
          $form['line_item_fields']['field_koppelstukken']['und']['#access'] = false;
        }

        // Hide aantal anti-dreunstroken if no anti-dreunstrook has been chosen
        $form['line_item_fields']['field_aantal_adsn']['und'][0]['value']['#states'] = array(
          'invisible' => array(
            'select[name="line_item_fields[field_anti_dreunstrook][und]"]' => array('value' => '_none'),
          ),
        );
      }

      break;

    case 'muurkap_eindstuk':
    case 'raamtablet_eindstuk':
      // Make sure the afwerking is set correctly
      $options = array('color' => $color, 'change_color_link' => $change_color_link);
      if(_fc_check_afwerking($form, $form_state, $options) === false) return;

      break;
  }
}

function _fc_get_image($path, $title, $weight) {
  return array(
    '#weight' => $weight,
    '#theme' => 'image_style',
    '#style_name' => 'medium',
    '#path' => $path,
    '#attributes' => array(
      'class' => array('right'),
      'title' => $title,
    ),
  );
}

function _fc_get_standaardprofiel_image($type, $title = '', $weight = 0) {
  $mapping = array(
    'BR'  => 'B',
    'BRH' => 'BR',
    'BVK' => 'BV',
    'L'   => 'L',
    'SPL' => 'P',
    'SR'  => 'R',
    'SVK' => 'V',
    'T'   => 'T',
    'U'   => 'U',
    'Z'   => 'Z',
  );
  $path = FC_PATH . "/in/images/UTL-" . $mapping[$type] . ".jpg";

  return _fc_get_image($path, $title, $weight);;
}

function _fc_get_plaatbewerking_image($name, $weight = 0) {
  $path = FC_PATH . "/in/images/$name.jpg";
  $title = t('plaatbewerking') . " " . $name;
  return _fc_get_image($path, $title, $weight);;
}



/**
 * Implements hook_commerce_checkout_router().
 */
// function feneko_calculator_commerce_checkout_router($order, $checkout_page) {
  // Very funky
  // We skip everything and go straight to the complete page
  // if($checkout_page['page_id'] == 'checkout') {
  //   $order = commerce_order_status_update($order, 'checkout_complete');
  //   commerce_checkout_complete($order);
  //   drupal_goto('checkout/' . $order->order_id . '/complete');
  // }
// }

/**
 * Check if the afwerking is correctly set and rebuild the form if needed
 *
 * @param array $form
 * @param array $form_state
 * @param array $options
 *   Options that might be needed for a specific case
 *   - color   : Required for all: The current color array
 *   - lakzijde: Required for field_plaatbewerking_afwerking
 *   - bicolor : Required for field_sandwichpaneel_afwerking
 */
function _fc_check_afwerking(&$form, &$form_state, $options = array()) {
  $field_name = _fc_get_field_name($form['attributes'], 'afwerking');

  $reno_block = isset($options['reno_block']) and $options['reno_block'];
  $is_reno = $options['color']['type'] === 'reno';

  // When reno is not available, we send a message and return
  if(($field_name === 'field_standaardprofiel_afwerking' or $reno_block) and $is_reno) {
    $msg = t('!kleur is een renolit kleur. ', array('!kleur' => $options['color']['text']))
         . t('Dit is niet beschikbaar in renolit kleuren.')
         . "<br />" . $options['change_color_link'];
    drupal_set_message($msg, 'warning');
    $form = array();
    return false;
  }

  // When submitting the form we don't do anything
  if($form_state['submitted']) {
    return;
  }

  // Make sure the afwerking is set correctly and cannot be changed anymore
  $afwerking_cur = $form['attributes'][$field_name]['#default_value'];
  $afwerking_new = &$form_state['values']['attributes'][$field_name];

  if($field_name === 'field_sandwichpaneel_afwerking') {
    $bicolor_field_name = 'field_sandwichpaneel_afwerking_2';
    $bicolor_cur = $form['attributes'][$bicolor_field_name]['#default_value'];
    $bicolor_new = &$form_state['values']['attributes'][$bicolor_field_name];

    $color = array($options['color']['type'], $options['bicolor']['type']);
    sort($color);
    list($afwerking_new, $bicolor_new) = $color;

    $rebuild = $afwerking_cur !== $afwerking_new || $bicolor_cur !== $bicolor_new;
  } else {
    // Set the new value based on some checks
    if($field_name === 'field_plaatbewerking_afwerking'
      and ($options['lakzijde'] === 'r' or $options['color']['maritime'])) {
      $afwerking_new = $options['color']['type'] . "2";
    } else {
      $afwerking_new = $options['color']['type'];
    }

    $rebuild = $afwerking_cur !== $afwerking_new;
  }

  // Rebuild if old and new differ
  if($rebuild) {
    foreach ($form['unchanged_attributes'] as $attr_name => $value) {
      if($attr_name[0] !== '#') {
        $attributes[$attr_name] = $form['attributes'][$attr_name]['#default_value'];
      }
    }
    $attributes[$field_name] = $afwerking_new;

    if(isset($bicolor_new)) {
      $attributes['field_sandwichpaneel_afwerking_2'] = $bicolor_new;
    }

    $form_state['input']['attributes'] = $attributes;
    $form_state['values']['attributes'] = $attributes;
    $form_state['values']['unchanged_attributes'] = $attributes;
    $form_state['rebuild'] = true;

    $form = drupal_rebuild_form($form['#form_id'], $form_state, $form);
  }

}


function fc_cart_init_form($form, $form_state) {
  global $user;
  $cart = commerce_cart_order_load($user->uid);
  $cart_wrapper = entity_metadata_wrapper('commerce_order', $cart);

  if($cart_wrapper->commerce_line_items->count()) {
    $link = l(t('cart'), 'cart');
    $text = t('Om de kleur van je bestelling te kunnen veranderen, moet je winkelmandje leeg zijn. Je kan ofwel je huidige bestelling afwerken door naar je !cart te gaan, of je kan je !cart leegmaken.<br />', array('!cart' => $link));
    // $form_state['rebuild'] = true;
    return confirm_form(
      array('delete' => array('#value' => true)),
      t('winkelmandje leegmaken?'),
      drupal_get_destination(),
      "$text<br />" . t('This action cannot be undone.'),
      t('Empty'),
      t('Cancel')
    );
  } else {
    drupal_set_title(t('Kies kleur en klant'));
    return array(
      'text' => array(
        '#markup' => t('Voor u iets kan bestellen, moet u eerst de gewenste kleur van de bestelling kiezen'),
      ),
      'client' => array(
        '#type' => 'select',
        '#options' => feneko_code_get_clients_options(true),
        '#title' => t('Client'),
        '#required' => true,
      ),
      'color' => array(
        '#type' => 'textfield',
        '#title' => t('Color'),
        '#autocomplete_path' => 'calculator/colors',
        '#attributes' => array(
          'placeholder' => t('Zoek de gewenste kleur'),
        ),
        '#description' => t('Laat leeg indien u geen kleur wenst. In dat geval kiest u voor een brut afwerking.')
      ),
      'maritime' => array(
        '#type' => 'checkbox',
        '#title' => t('Qualité maritime'),
        '#description' => t('Opgepast! Meerprijs.')
      ),
      'submit' => array(
        '#type' => 'submit',
        '#value' => t('Continue'),
        '#submit' => array('fc_cart_init_form_submit'),
      ),
      '#validate' => array('fc_cart_init_form_validate'),
    );
  }


}

function fc_validate_add_to_cart_form($form, &$form_state) {
  // Recalculate line item values after submit and before save
  if($form_state['submitted']) {
    $line_item = &$form_state['values']['line_item_fields'];

    // Calculate the total breedte
    if(isset($line_item['field_multi_breedte']) and isset($line_item['field_breedte'])) {
      // We leave the breedte as is for special bewerkingen
      if($line_item['field_type_bewerking']['und'][0]['value'] !== FC_PB_SPECIAL) {
        $breedte = 0;
        foreach ($line_item['field_multi_breedte'][LANGUAGE_NONE] as $value) {
          $breedte += $value['value'];
        }
        $line_item['field_breedte'] = array(LANGUAGE_NONE => array(array('value' => $breedte)));
      }
    }

    // Calculate the number of plooien
    if(isset($line_item['field_plooien'])) {
      // We leave the plooien as is for special bewerkingen
      $typeBewerking = $line_item['field_type_bewerking']['und'][0]['value'];
      if($typeBewerking !== FC_PB_SPECIAL) {
        $num_plooien = fc_get_parts($typeBewerking) - 1;
        $line_item['field_plooien'] = array(LANGUAGE_NONE => array(array('value' => $num_plooien)));
      }
    }

    // Set some empty values of disabled fields for RULES
    _fc_set_default_value($form, $form_state);

    // Do some VALIDATION checks

    // Aantal Anti-Dreunstroken
    if(!empty($line_item['field_anti_dreunstrook']['und'][0]['value'])
      and empty($line_item['field_aantal_adsn']['und'][0]['value'])) {
      $msg = t('U moet minstens 1 anti-dreunstrook kiezen.');
      form_set_error('line_item_fields][field_aantal_adsn', $msg);
      $form_state['rebuild'] = true;
    }

    // Multi breedte
    if(isset($line_item['field_multi_breedte'])) {
      $typeBewerking = $line_item['field_type_bewerking']['und'][0]['value'];
      $number = fc_get_parts($typeBewerking);
      $max = 1500;

      $total = 0;
      for ($i=0; $i < $number; $i++) {
        $val = $line_item['field_multi_breedte']['und'][$i]['value'];
        $total += $val;
        if($val <= 0) {
          $msg = t('Breedte !b moet groter zijn dan 0.', array('!b' => chr(97 + $i)));
          form_set_error("line_item_fields][field_multi_breedte][und][$i", $msg);
          $form_state['rebuild'] = true;
        }
      }
      if($total > $max) {
        $msg = t('De som van de breedte stukken mag maximaal :max mm zijn.', array(':max' => $max));
        form_set_error("line_item_fields][field_multi_breedte", $msg);
        $form_state['rebuild'] = true;
      }
    }

    // Multi Hoek
    if(isset($line_item['field_multi_hoek'])) {
      $typeBewerking = $line_item['field_type_bewerking']['und'][0]['value'];
      $number = fc_get_parts($typeBewerking) - 1;

      for ($i=0; $i < $number; $i++) {
        $val = $line_item['field_multi_hoek']['und'][$i]['value'];
        if($val < 30 or $val > 180) {
          $msg = t('Hoek !h moet minimum 30 zijn en maximum 180.', array('!h' => "x" . ($i+1)));
          form_set_error("line_item_fields][field_multi_hoek][und][$i", $msg);
          $form_state['rebuild'] = true;
        }
      }
    }

    // Breedte
    if(isset($line_item['field_breedte'])) {
      if($line_item['field_breedte']['und'][0]['value'] <= 0) {
        $msg = t('De breedte moet groter zijn dan 0.');
        form_set_error('line_item_fields][field_breedte', $msg);
        $form_state['rebuild'] = true;
      }
    }

    // Lengte
    if(isset($line_item['field_lengte'])) {
      $product = commerce_product_load($form['product_id']['#value']);
      switch ($product->type) {
        case 'plaatbewerking':
        case 'raamtablet':
        case 'muurkap':
        case 'sandwichpaneel':
          $max = 4000;
          if($line_item['field_lengte']['und'][0]['value'] > $max) {
            $msg = t('De lengte mag maximaal :max mm zijn.', array(':max' => $max));
            form_set_error('line_item_fields][field_lengte', $msg);
            $form_state['rebuild'] = true;
          }
          break;
      }
    }

    // Plooien
    if(isset($line_item['field_plooien'])) {
      if(!is_int(intval($line_item['field_plooien']['und'][0]['value']))) {
        $msg = t('Het aantal plooien moet een getal zijn.');
        form_set_error('line_item_fields][field_plooien', $msg);
        $form_state['rebuild'] = true;
      }
    }

    // The drawing
    if(isset($line_item['field_tekening'])) {
      // The file is only important for the special type bewerking
      $typeBewerking = $line_item['field_type_bewerking']['und'][0]['value'];
      if($typeBewerking === FC_PB_SPECIAL) {
        if(!$line_item['field_tekening']['und'][0]['fid']) {
          $msg = t('Gelieve een tekening toe te voegen.');
          form_set_error('line_item_fields][field_tekening', $msg);
          $form_state['rebuild'] = true;
        }
      }
    }

  } else {
    // Update the discrete lengte based on what has been filled in for the lengte
    if($field_name = _fc_get_field_name($form['attributes'], 'lengte')) {
      $options = $form['attributes'][$field_name]['#options'];
      $lengte  = $form_state['input']['line_item_fields']['field_lengte']['und'][0]['value'];
      $discrete_lengte = fc_get_discrete_lengte($lengte, $options);
      $current_lengte = $form['attributes'][$field_name]['#default_value'];

      if($discrete_lengte != $current_lengte) {
        $form_state['input']['attributes'][$field_name] = $discrete_lengte;
        $form_state['values']['attributes'][$field_name] = $discrete_lengte;
        $form_state['rebuild'] = true;
      }
    }
  }

}


// This is an ugly hack. This should be done better
function _fc_set_default_value($form, &$form_state) {
  $fields = array('field_eindstukken', 'field_hoeken');

  foreach ($fields as $field) {
    if(isset($form_state['values']['line_item_fields'][$field]['und'])) {
      foreach ($form_state['values']['line_item_fields'][$field]['und'] as &$value) {
        if(empty($value['value'])) {
          $value['value'] = 0;
        }
      }
    }
  }
}

function fc_colors_autocomplete($string) {
  $result = fc_colors_search($string);
  echo json_encode($result);
}

function fc_colors_search($string) {
  // RAL query
  $ral = db_select('ral', 'r')->fields('r', array('kleur', 'ref'))
                              ->condition('kleur', "%$string%", 'LIKE')
                              ;
  // Renolit query
  $or = db_or()->condition('kleur', "%$string%", 'LIKE')
               ->condition('ref', "%$string%", 'LIKE');
  $renolit = db_select('renolit', 'r')->fields('r')->condition($or);

  // Union
  $rs = $ral->union($renolit)->execute();

  $result = array();

  foreach ($rs as $record) {
    $key = $record->kleur . ' (' . $record->ref . ')';
    $result[$key] = $key;
  }

  return $result;
}

function _fc_color_ra($order_wrapper, $url_options) {
  $info = $order_wrapper->getPropertyInfo();

  $color = _fc_get_color($order_wrapper->field_color->value());
  $color['maritime'] = $order_wrapper->field_maritime->value()
                                        ? $info['field_maritime']['label'] : '';

  $change_color_link = l(t('Verander de kleur'), 'cart/init', $url_options);

  $ra = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-item', 'color')),
    '#weight' => -100,
    'label' => array(
      '#type' => 'container',
      '#attributes' => array('class' => array('label')),
      'data' => array(
        '#prefix' => '<label>',
        '#suffix' => '</label>',
        '#markup' => t('Color'),
      ),
      'link' => array(
        '#type' => 'container',
        '#attributes' => array('class' => array('link')),
        'data' => array(
          '#markup' => $change_color_link,
        ),
      ),
    ),
    'value' => array(
      '#type' => 'container',
      '#attributes' => array('class' => array('value')),
      'color_string' => array(
        '#type' => 'container',
        '#attributes' => array('class' => array('color-string')),
        'data' => array(
          '#markup' => $color['text'],
        ),
      ),
      'maritime' => array(
        '#type' => 'container',
        '#attributes' => array('class' => array('maritime')),
        'data' => array(
          '#markup' => $color['maritime'],
        ),
      ),
      'type' => array(
        '#type' => 'container',
        '#attributes' => array('class' => array('type')),
        'data' => array(
          '#markup' => $color['type'],
        ),
      ),
    ),
  );

  return array($color, $ra, $change_color_link);
}

function fc_colors_validate($name, $value) {
  // Get the RAL code out of the value
  preg_match("/(.*)\ \((.*)\)/", $value, $matches);
  $kleur = $matches[1];
  // $ref = $matches[2];

  $results = fc_colors_search($kleur);
  foreach ($results as $result) {
    if($result === $value) return;
  }

  // If we didn't return we didn't find a match
  form_set_error($name, t('De Kleur is niet uit de lijst gekozen.'));
}

function fc_cart_init_form_validate(&$form, &$form_state) {
  if(empty($form_state['values']['confirm'])) {
    if(!empty($form_state['values']['color'])) {
      fc_colors_validate('color', $form_state['values']['color']);
    } else {
      $form_state['values']['color'] = FC_NO_COLOR;
    }
  }
}

function fc_cart_init_form_submit($form, $form_state) {
  // Remove all items from the cart and save the color to the order
  global $user;
  $cart = commerce_cart_order_load($user->uid);
  $cart_wrapper = entity_metadata_wrapper('commerce_order', $cart);

  if(isset($form_state['values']['confirm']) && $form_state['values']['confirm']) {
    commerce_cart_order_empty($cart);

    // Discount items are not deleted, so we force them
    foreach ($cart_wrapper->commerce_line_items as $delta => $line_item) {
      commerce_line_item_delete($line_item->line_item_id->value());
      unset($cart_wrapper->commerce_line_items[$delta]);
    }
  } else {
    $cart_wrapper->field_color->set($form_state['values']['color']);
    $cart_wrapper->field_client->set($form_state['values']['client']);

    // We set the qualité maritime field only if a color has been chosen
    if($form_state['values']['color'] === FC_NO_COLOR) {
      $cart_wrapper->field_maritime->set(0);
    } else {
      $cart_wrapper->field_maritime->set($form_state['values']['maritime']);
    }
  }
  $cart_wrapper->save();
}


function fc_test_minimum_order_amount($order, $minimum = NULL) {
  if(!isset($minimum)) {
    $minimum = variable_get('fc_minimum_order_amount');
  }
  $price = $order->commerce_order_total['und'][0]['data']['components'][0]['price']['amount'];
  return $price < $minimum * 100000;
}

function _fc_get_color($text) {
  if($text == FC_NO_COLOR) {
    return array('type' => FC_NO_COLOR, 'text' => FC_NO_COLOR);
  } else {
    // Get the color out of the color text
    preg_match("/(.*)\ \((.*)\)/", $text, $matches);

    $and = db_and()->condition('kleur', $matches[1])
                   ->condition('ref', $matches[2]);

    // First we try the RAL colors
    $result = db_select('ral', 'r')->fields('r')->condition($and)
                                   ->execute()->fetchAssoc();

    // If no result found, we try the Renolit colors
    if(empty($result)) {
      $query = db_select('renolit', 'r')->fields('r')->condition($and);
      $query->addExpression(':reno', 'type', array(':reno' => 'reno'));
      $result = $query->execute()->fetchAssoc();
    }

    $result['text'] = $text;

    return $result;
  }

}



/**
 * @param $muurkap_type
 *   NULL for raamtablet
 *   1, 2 or 3 for Muurkappen
 */
function fc_get_multi_field_mapping($muurkap_type = NULL) {
  $mapping = array(
    'field_eindstukken' => array(
      t('Type 1 - Links'),
      t('Type 1 - Rechts'),
      t('Type 2 - Links'),
      t('Type 2 - Rechts'),
    ),
    'field_hoeken' => array(
      t('Binnenhoeken'),
      t('Buitenhoeken'),
    ),
    'field_multi_breedte' => range('a', 'e'),
  );

  // Set the multi hoek
  for ($i=0; $i < 4; $i++) {
    $mapping['field_multi_hoek'][$i] = "x" . ($i+1);
  }


  if ($muurkap_type == 1 or $muurkap_type == 2) {
    $mapping['field_eindstukken'] = array(
      t('Type 1'), NULL,
      t('Type 2'), NULL,
    );
    $mapping['field_hoeken'] = array(
      t('Aantal'), NULL,
    );
  }

  return $mapping;
}

mb_internal_encoding('UTF-8');

/**
 * multibyte string compatible range('A', 'Z')
 *
 * @param string $start Character to start from (included)
 * @param string $end Character to end with (included)
 * @return array list of characters in unicode alphabet from $start to $end
 * @author Rodney Rehm
 */
function mb_range($start, $end) {
    // if start and end are the same, well, there's nothing to do
    if ($start == $end) {
        return array($start);
    }

    $_result = array();
    // get unicodes of start and end
    list(, $_start, $_end) = unpack("N*", mb_convert_encoding($start . $end, "UTF-32BE", "UTF-8"));
    // determine movement direction
    $_offset = $_start < $_end ? 1 : -1;
    $_current = $_start;
    while ($_current != $_end) {
        $_result[] = mb_convert_encoding(pack("N*", $_current), "UTF-8", "UTF-32BE");
        $_current += $_offset;
    }
    $_result[] = $end;
    return $_result;
}

function fc_get_parts($typeBewerking) {
  $mapping = array(
    'L' => 2,
    'U' => 3,
    'C' => 5,
    'Z' => 3,
    'I' => 1,
    'J' => 4,
  );
  return $mapping[$typeBewerking];
}




/**
 * @param array $form
 *
 * @param int $number
 *    The number of items to be SHOWN
 */
function fc_disable_multi_fields(&$form, &$form_state, $number) {
  $multiBreedte = &$form['line_item_fields']['field_multi_breedte'][LANGUAGE_NONE];
  $multiHoek = &$form['line_item_fields']['field_multi_hoek'][LANGUAGE_NONE];

  // For field_multi_breedte
  for($i = $number; $i < $multiBreedte['#cardinality']; $i++) {
    $form_state['values']['line_item_fields']['field_multi_breedte']['und'][$i]['value'] = 0;
    $multiBreedte[$i]['value']['#default_value'] = 0;
    $multiBreedte[$i]['value']['#disabled'] = TRUE;
  }

  // For field_multi_hoek
  for($i = $number-1; $i < $multiHoek['#cardinality']; $i++) {
    $form_state['values']['line_item_fields']['field_multi_hoek']['und'][$i]['value'] = 0;
    $multiHoek[$i]['value']['#default_value'] = 0; // 90 gives unexpected results
    $multiHoek[$i]['value']['#disabled'] = TRUE;
  }
}


/**
 * Submit handler to show the line item delete message.
 * Code taken from commerce_cart_line_item_delete_form_submit()
 * in commerce-cart.module
 */
function fc_line_item_delete_form_submit($form, &$form_state) {
  $line_item_id = $form_state['triggering_element']['#line_item_id'];

  // Get the corresponding wrapper to show the correct title.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $form_state['line_items'][$line_item_id]);

  // If the deleted line item is a product...
  if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
    $title = $line_item_wrapper->commerce_product->type->label();
  }
  else {
    $title = $line_item_wrapper->line_item_label->value();
  }

  drupal_set_message(t('%title removed from your cart.', array('%title' => $title)));
}


function feneko_calculator_commerce_cart_attributes_refresh_alter(&$commands, $form, $form_state) {
  $type = $form_state['context']['entity_type'];
  $id   = $form_state['context']['entity_id'];
  $price_selector = ".$type-$id-product-commerce-price";

  // Put the focus on the next element
  $selector = '[name="' . $form_state['triggering_element']['#name'] . '"]';
  $commands[] = ajax_command_invoke(NULL, 'handleFocus', array($selector));
}


/**
 * Get the full fieldname according to the type
 *
 * @param array $fields
 *   Fields to look into
 * @param string type
 *   The suffix in the fieldname to look for
 * @return string
 *   The field name or NULL
 */
function _fc_get_field_name($fields, $type) {
  $field_names = array_keys($fields);

  foreach ($field_names as $field_name) {
    preg_match("/field_(.*)_$type/", $field_name, $matches);
    if($matches) return $matches[0];
  }
}


// We assume $options is sorted from small to bigger and there is at least 1 element
function fc_get_discrete_lengte($length, $options) {
  foreach ($options as $key => $value) {
    if($key >= $length) {
      return $key;
    }
  }
  return $key;
}

function fc_custom_cart_callback($product) {
  $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
  $title = $product_wrapper->type->label();

  drupal_set_message(t('%title has been added to your cart.', array('%title' => $title)));
}


function fc_preprocess() {
  \FenekoCalculator\Helper::split();
  drupal_goto('import');
}

function fc_convert_mdb() {
  // TODO: use /home/femi/Dropbox/IT Simply Works/Klanten/Feneko/bin/export.sh
  echo "Better use /home/femi/Dropbox/IT Simply Works/Klanten/Feneko/bin/export.sh";
  exit;
}

function fc_goto() {
  drupal_goto('import');
}



function fc_test() {
  // $order = commerce_order_load(132);
  // rules_invoke_event('commerce_checkout_complete', $order);
}


/**
 * Adds all drawings of the order to the mail message
 *
 * @param $order_id
 *   The order ID
 * @param $message
 *   The message to add the attachments to. (Passed by reference)
 */
function fc_add_drawings_attachments($order_id, &$message) {
  $order = commerce_order_load($order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    if(isset($line_item_wrapper->field_tekening)) {
      $drawing = $line_item_wrapper->field_tekening->value();

      if(isset($drawing['fid']) && $drawing['fid']) {
        $attachment = array(
          'filecontent' => file_get_contents($drawing['uri']),
          'filename' => $drawing['filename'],
          'filemime' => $drawing['filemime'],
        );

        $message['params']['attachments'][] = $attachment;
      }
    }
  }
}

function _fc_totals_order($order_wrapper) {
  $total_price = $order_wrapper->commerce_order_total->value();

  $totals['raw'] = array(
    'subtotal' => $total_price['data']['components'][0]['price']['amount'],
    'total' => $total_price['amount'],
  );

  $totals['formatted'] = array(
    'subtotal' => _fc_format_amount($totals['raw']['subtotal']),
    'total'    => _fc_format_amount($totals['raw']['total']),
  );

  return $totals;
}

function _fc_format_amount($amount) {
  global $fc_currency_settings;
  $currency_code = "EUR";
  return commerce_price_decimals_formatter_currency_format(
    $amount, $currency_code, $fc_currency_settings
  );
}

function fc_export_orders_submit($form, $form_state) {
  // Make sure we only react on a click on the export button
  if($form_state['clicked_button']['#value'] === $form['export']['#value']) {
    libraries_load('zipstream');
    module_load_include('inc', 'feneko_calculator', 'feneko_calculator.admin');
    module_load_include('inc', 'feneko_calculator', 'feneko_calculator.mpdf');

    // Create the zipstream
    $zip = new ZipStream('orders.zip');

    // Add XMLs and PDFs of selected orders to zipstream
    // And set the status to completed
    foreach ($form_state['values']['views_bulk_operations'] as $order_id) {
      if($order_id) {
        $order = commerce_order_load($order_id);

        // Add XML and PDF of the order to zipstream
        $xml = feneko_calculator_order_to_xml($order);
        $pdf = fc_get_attachment($order->order_id);
        $zp_pdf = fc_get_attachment($order->order_id, true, true);
        $zip->add_file("$order_id.xml", $xml);
        $zip->add_file("$order_id.pdf", $pdf);
        $zip->add_file("ZP$order_id.pdf", $zp_pdf);

        // Set the status of the order to completed
        $order->status = 'completed';
        commerce_order_save($order);
      }
    }

    $zip->finish();
    exit();
  }
}
